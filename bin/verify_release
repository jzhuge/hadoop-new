#!/usr/bin/env bash
#
my_name=$(basename ${BASH_SOURCE[0]})

usage() {
  cat <<EOF
Verify a Hadoop release.

Usage:
  $my_name <release> <release_url>

Environment:
  VREL_STEPS        Verification steps.

EOF
}

error() {
  echo -e "Error: $@\n" >&2
}

h1() {
  echo -e "\n= $@ =\n"
}

h2() {
  echo -e "\n== $@ ==\n"
}

verify_release() {
  h1 "Verify $release"

  local default_steps="
signatures
checksums
binary_sanity
source_build
source_sanity
source_aws
source_adls"
  local steps=${VREL_STEPS:=$default_steps}

  echo "Verification steps:"
  for step in $steps; do
    echo "  $step"
  done

  if [[ -d $release ]]; then
    cd $release
  else
    mkdir $release && cd $release && download || return 1
  fi

  for step in $steps; do
    $step || failed_steps+=" $step"
  done

  if [[ -n $failed_steps ]]; then
    echo -e "\nFailed steps:$failed_steps\n" >&2
    return 2
  fi
}

download() {
  h2 "Download release tarballs"
  wget --quiet --recursive --no-directories --no-host-directories --no-parent --reject "index.html*" $release_url
}

signatures() {
  local rc

  h2 "Import PGP keys"
  rm -f KEYS
  wget --quiet https://dist.apache.org/repos/dist/release/hadoop/common/KEYS &&
    gpg --quiet --import KEYS

  h2 "Verify PGP signatures"
  for asc in *asc; do
    gz=${asc//.asc/}
    gpg --quiet --verify $asc $gz || rc=1
  done

  return $rc
}

checksums() {
  local rc
  h2 "Verify checksums"
  for mds in *.mds; do
    echo "Verify SHA256 checksum in $mds"
    shasum -a 256 -c <(checksum_from_mds SHA256 $mds) || rc=1
    echo "Verify MD5 checksum in $mds"
    md5sum -c <(checksum_from_mds MD5 $mds) || rc=1
  done
  return $rc
}

binary_sanity() {
  local rc
  h2 "Run sanity tests for the binary package"
  [[ -d $release_bin ]] || tar xf $release.tar.gz
  pushd $release_bin
  run_all || rc=$?
  popd
  return $rc
}

source_build() {
  local rc
  h2 "Build source"
  [[ -d $release_src ]] || tar xf $release-src.tar.gz
  pushd $release_src
  mvn --quiet clean &&
    mvn --quiet install -DskipTests -DskipShade -Dmaven.javadoc.skip -Pnative -Pdist -Dtar ||
    rc=$?
  popd
  return $rc
}

source_sanity() {
  local rc
  h2 "Run sanity tests for the source package"
  pushd $release_src
  run_all || rc=$?
  popd
  return $rc
}

source_aws() {
  local rc
  [[ -e $HOME/.config/aws/auth-keys.xml ]] || return
  [[ -e $HOME/.config/aws/contract-test-options.xml ]] || return
  h2 "Run AWS integration tests"
  pushd $release_src/hadoop-tools/hadoop-aws
  ln -nsf $HOME/.config/aws/{auth-keys.xml,contract-test-options.xml} src/test/resources
  mvn --quiet verify -Dtest=TestS3A* -Dit.test=ITestS3A* || rc=$?
  popd
  return $rc
}

source_adls() {
  local rc
  [[ -e $HOME/.config/adls/auth-keys.xml ]] || return
  h2 "Run ADL live tests"
  pushd $release_src/hadoop-tools/hadoop-azure-datalake
  ln -nsf $HOME/.config/adls/auth-keys.xml src/test/resources
  mvn --quiet test || rc=$?
  popd
  return $rc
}

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      usage
      exit
      ;;
    -v|--verbose)
      verbose=yes
      shift
      ;;
    -*)
      error "Unknown option $1"
      usage
      exit 1
      ;;
    *)
      break
  esac
done

release=$1
release_url=$2

if [[ -z $release || -z $release_url ]]; then
  usage
  exit
fi

[[ $verbose == yes ]] && set -x
set -e

release_bin=$(sed -e 's/-RC.*//' <<< $release)
release_src=$release_bin-src

verify_release
